#           일정한 패턴을 가지는 분포
library(fBasics)
# x변수 첨도 = 데이터 분포가 뾰족한 정도
# 통계량이 0보다 크면 정규분포 대비 뾰족한 형태
# 0보다 작으면 정규분포 대비 평평한 형태
kurtosis(x)
library(reshape2)
View(airquality)
head(airquality)
# 문제1)
is.na(airquality$Ozone)
# 문제1)
sum(is.na(airquality$Ozone))
Ozone_1 <- na.omit(airquality$Ozone)
View(Ozone_1)
Ozone_1
View(airquality$Solar.R)
sum(Ozone_1)
mean(Ozone_1)
sd(Ozone_1)
length(Ozone_1)
n <- length(Ozone_1)
n
sd(Ozone_1)
n <- sd(Ozone_1)
n
n^2
var <- n^2
var
#===============================================================================
str(airquality)
airquality[airquality$Month==5 $ airquality$Day==7,]
airquality[airquality$month==5 $ airquality$day==7,]
#===============================================================================
str(airquality)
airquality[airquality$month==5 $ airquality$day==7,]
airquality[airquality$month==5 & airquality$day==7,]
library(reshape2)
#===============================================================================
str(airquality)
airquality[airquality$month==5 & airquality$day==7,]
View(airquality)
head(airquality)
#===============================================================================
str(airquality)
airquality[airquality$month==5 & airquality$day==7,]
airquality[airquality$Month==5 & airquality$Day==7,]
#===============================================================================
# 1번
str(airquality)
class(airquality)
#===============================================================================
# 1번
names(airquality) <- tolower(names(airquality))
str(airquality)
class(airquality)
sum(airquality$ozone, na.rm = T)
mean(airquality$ozone, na.rm = T)
var(airquality$ozone, na.rm = T)
sd(airquality$ozone, na.rm = T)
#===============================================================================
# 9번
wind6 <- subset(airquality, month=6, select = wind)
wind6
wind6$wind
wind6[which.max(wind6$wind),]
#===============================================================================
# 9번
wind6 <- subset(airquality, month==6, select = wind)
View(wind6)
wind6
wind6$wind
class(wind6)
class(wind6$wind)
library(dplyr)
mtcars
nrow(mtcars)                           # 행 개수
str(mtcars)
filter(mtcars, cyl=4)
filter(mtcars, cyl==4)
filter(mtcars, cyl >= 6 & mpg > 20)
arrange(mtcars, wt, desc(hp))          # wt를 기준으로 내림차순
arrange(mtcars, wt, desc(hp))          # wt를 기준으로 오름차순, hp는 내림차순
head(arrange(mtcars, wt, desc(hp)))          # wt를 기준으로 오름차순, hp는 내림차순
head(arrange(mtcars, mpg, desc(wt)))
select(mtcars, am, gear)
select(mtcars, mpg, cyl, carb)
mutate(mtcars, years='1974')
head(mutate(mtcars, mpg_rank=rank(mpg)))
distinct(mtcars, cyl)
distinct(mtcars, cyl, gear)
summarise(mtcars, cyl_mean=mean(cyl),
cyl_min=min(cyl),
cyl_max=max(cyl))
summarise(mtcars, mean(cyl), min(cyl), max(cyl))
gr_cyl <- group_by(mtcars, cyl)
gr_cyl
# gr_cyl에서 cyl별 개수 요약 정보
summarise(gr_cyl, n())
# gear 중복값을 제외하고 cyl별 개수 요약 정보
summarise(gr_cyl, n_distinct(gear))
sample_n(mtcars, 10)
sample_n(mtcars, 10)
sample_frac(mtcars, 0.2)
# cyl별로 그룹으로 묶고 개수로 요약
group_by(mtcars, cyl) %>% summarise(n())
mp_rank <- mutate(mtcars, mpg_rank=rank(mpg))
arrange(mp_rank, mpg_rank)
mutate(mtcars, mpg_rank=rank(mpg)) %>% arrange(mpg_rank)
install.packages("hflights")
library(dplyr)
#===============================================================================
library(dplyr)
fil_data <- filter(airquality, airquality$month==5)
fil_data
sel_data <- select(fil_data, ozone)                        # 열 정보 추출
sel_data
mean(sel_data$ozone, na.rm = T)
X = c(1:10)
x
X = c(1:10)
print(x)
X <- c(1:10)
print(x)
x <- c(1:10)
print(x)
x
y <- seq(1,10,1)
y
z <- rep(1.10)
z
z <- rep(1,10)
z
z1 <- rep(c(1,2,3),3)
z1
z2 <- rep(c(1,2,3),c(1,2,3))
z2
rm(list = ls())
gc()
options(scipen = 100, digits = 5)
Sys.setenv(LANG= "en")
library(reshape2)
View(airquality)
names(airquality) <- tolower(names(airquality))
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
library(reshape2)
View(airquality)
melt_test <- melt(airquality)
melt_test
library(reshape2)
View(airquality)
melt_test <- melt(airquality)
melt_test
cast_test <- cast(airquality)
cast_test <- cast(melt_test)
cast_test
cast_test <- acast(airquality)
cast_test
library(reshape2)
View(airquality)
cast_test <- dcast(airquality)
library(readxl)
exdata1 <- read_excel('res/sample1.xlsx')
exdata1
# 빈도수 분석
install.packages('descr')
library(descr)
freq(exdata1$AREA, plot = T)
# stem and leaf plot
# 통계적 자료를 줄기, 잎, 도수로 표현
stem(exdata1$AGE)
exdata1$AGE
library(readxl)
exdata1 <- read_excel('res/sample1.xlsx')
exdata1
# 빈도수 분석
install.packages('descr')
library(descr)
freq(exdata1$AREA, plot = T)
# stem and leaf plot
# 통계적 자료를 줄기, 잎, 도수로 표현
stem(exdata1$AGE)
exdata1$AGE
# histogram = 구간별 빈도수
hist()
library(readxl)
exdata1 <- read_excel('res/sample1.xlsx')
exdata1
library(descr)
# stem and leaf plot
# 통계적 자료를 줄기, 잎, 도수로 표현
stem(exdata1$AGE)
exdata1$AGE
# histogram = 구간별 빈도수
hist(exdata1$AGE)
hist(exdata1$AGE, xlim = c(0,100), ylim = c(0,10), main = '나이 분포포')
hist(exdata1$AGE, main = '계좌이용 나이분포',xlab='나이 구간', ylab='나이 분포',
xlim=c(1,100), col='green',probability=T)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=2)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=5)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
xlim=c(1,100), col='green',probability=T)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=5)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=8)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=10)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=6)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=5)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=8)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=4)
hist(exdata1$AGE, main = '계좌이용 나이분포', xlab='나이 구간', ylab='나이 분포',
col='green', freq=T, breaks=5)
boxplot(exdata1$Y17_CNT, exdata1$Y16_CNT)
quantile(exdata1$Y17_CNT)
quantile(exdata1$Y16_CNT)
boxplot(exdata1$Y17_CNT, exdata1$Y16_CNT,
ylim=c(0,60), main='BoxPlot',
names = c('17년 계좌건수', '16년 계좌건수'),
col=c('green','yellow'))
char_data <- c(305,450,320,460,330,480,380,520)
names(char_data) <- c('2018 1분기','2019 1분기',
'2018 2분기','2019 2분기',
'2018 3분기','2019 3분기',
'2018 4분기','2019 4분기')
barplot(char_data, ylim = c(0,600),
col = rainbow(7), main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, ylim = c(0,600),
col = rainbow(8), main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, ylim = c(0,600),
col = rainbow(3), main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, ylim = c(0,600),
col = rainbow(7), main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, ylim = c(0,600),
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7), main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=3, cex.names=0.8,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=1, cex.names=0.8,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=1, cex.names=0.2,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=1, cex.names=0.8,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=5, cex.names=0.8,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
space=0.5, cex.names=0.8,
main = '2018년 vs 2019년 매출현황 비교')
barplot(char_data, xlim = c(0,600), horiz = T,
ylab='매출액(단위:백만원)',
xlab='년도별 분기 현황',
col = rainbow(7),
main = '2018년 vs 2019년 매출현황 비교')
VADeaths
par(mfrow=c(1,1))
barplot(VADeaths, beside = T, col = rainbow(5),
main = '버지니아 하위계층 사망비율')
legend(19, 71, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = T, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(3.8, 200, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(3.8, 100, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
par(mfrow=c(1,1))
barplot(VADeaths, beside = T, col = rainbow(5),
main = '버지니아 하위계층 사망비율')
legend(19, 71, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(3.8, 100, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
legend(3.8, 50, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
legend(3.8, 100, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
VADeaths
par(mfrow=c(1,1))
barplot(VADeaths, beside = T, col = rainbow(5),
main = '버지니아 하위계층 사망비율')
legend(19, 71, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(3.8, 50, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(1, 50, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(5, 50, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
legend(4, 50, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(4, 150, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = '버지니아 하위계층 사망비율',font.main=4)
legend(4, 200, c('50-54','55-59','60-64',
'65-69','70-74'),
cex=0.8, fill = rainbow(5))
par(mfrow=c(1,1))
dotchart(char_data, color = c('blue','red'),
lcolor = 'black',pch = 1:2,
labels = names(char_data),
xlab = '매출액',
main='분기별 판매현황 : Dot Chart',
cex=1.2)
par(mfrow=c(1,1))
pie(char_data, labels = names(char_data),
col = rainbow(5), cex=1.2)
title('2018~2019년도 분기별 매출현황')
boxplot(VADeaths,range=0)
boxplot(VADeaths,range=0, notch=T)
data(iris)
str(iris)
summary(iris$Sepal.Length)
summary(iris$Sepal.Length)
hist(iris$Sepal.Length, xlab = '꽃받침 길이',
col='megenta',
main='iris 꽃받침 길이 Histogram',
xlim=c(4.3,7.9))
hist(iris$Sepal.Length, xlab = '꽃받침 길이',
col='green',
main='iris 꽃받침 길이 Histogram',
xlim=c(4.3,7.9))
iris
summary(iris$Sepal.Width)
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='yellow',
main='iris 꽃받침 너비 Histogram',
xlim=c(2.0,4.5))
par(mfrow=c(1,2))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='yellow',
main='iris 꽃받침 너비 빈도수',
xlim=c(2.0,4.5))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='blue', freq=F,
main='iris 꽃받침 너비 확률 밀도',
xlim=c(2.0,4.5))
# 밀도
lines(density(iris$Sepal.Width), col='red')
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='green', freq=F,
main='iris 꽃받침 너비 확률 밀도',
xlim=c(2.0,4.5))
par(mfrow=c(1,2))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='yellow',
main='iris 꽃받침 너비 빈도수',
xlim=c(2.0,4.5))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='green', freq=F,
main='iris 꽃받침 너비 확률 밀도',
xlim=c(2.0,4.5))
# 밀도
lines(density(iris$Sepal.Width), col='red')
par(mfrow=c(2,2))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='yellow',
main='iris 꽃받침 너비 빈도수',
xlim=c(2.0,4.5))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='green', freq=F,
main='iris 꽃받침 너비 확률 밀도',
xlim=c(2.0,4.5))
# 밀도
lines(density(iris$Sepal.Width), col='red')
#===============================================================================
# c(1,2) = 1행2열
par(mfrow=c(1,2))
#par(mfrow=c(2,2))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='yellow',
main='iris 꽃받침 너비 빈도수',
xlim=c(2.0,4.5))
hist(iris$Sepal.Width, xlab = '꽃받침 너비',
col='green', freq=F,
main='iris 꽃받침 너비 확률 밀도',
xlim=c(2.0,4.5))
# 밀도
lines(density(iris$Sepal.Width), col='red')
x <- seq(2.0,4.5,0.1)
x
# 히스토그램에 정규분포 곡선 추가가
curve(dnorm(x, mean=mean(iris$Sepal.Width),
sd=sd(iris$Sepal.Width)),
col='orange',add = T)
# 히스토그램에 정규분포 곡선 추가가
curve(dnorm(x, mean=mean(iris$Sepal.Width),
sd=sd(iris$Sepal.Width)),
col='black',add = T)
# 산점도 : 좌표상에서 각각의 관찰값들을 점,특정문자로 표시하는 그래프
price <- runif(10,min = 1,max = 100)
price
plot(price)
plot(price,col='red')
par(new=T)
line_chart = 1:100
plot(line_chart, type='l', col='blue', axes=F, ann=F)
#===============================================================================
# p : points
# l : lines
# b : both(점+선)
# o : 점+선 중첩(overlap)
# s : 왼쪽값을 기초로 계단모양 연결
#===============================================================================
plot(line_chart, type='l', col='blue', axes=F, ann=F)
text(70,80, '대각선 추가',col='magenta')
# 산점도 : 좌표상에서 각각의 관찰값들을 점,특정문자로 표시하는 그래프
price <- runif(10,min = 1,max = 100)
price
plot(price,col='red')
par(new=T)
line_chart = 1:100
#===============================================================================
# p : points
# l : lines
# b : both(점+선)
# o : 점+선 중첩(overlap)
# s : 왼쪽값을 기초로 계단모양 연결
#===============================================================================
plot(line_chart, type='l', col='blue', axes=F, ann=F)
text(70,80, '대각선 추가',col='magenta')
par(mfrow=c(2,2))
plot(price, type = 'l')
plot(price, type = 'o')
plot(price, type = 'h')
plot(price, type = 's')
par(mfrow=c(2,2))
plot(price, type = 'o', pch=5)
plot(price, type = 'o', pch=15)
plot(price, type = 'o', pch=20)
plot(price, type = 'o', pch='*',col='orange',cex=1.5)
plot(price, type = 'o', pch='*',col='green',cex=1.5, lwd=3)
#===============================================================================
# lwd = 선굵기
par(mfrow=c(2,3))
plot(price, type = 'o', pch=5)
plot(price, type = 'o', pch=15)
plot(price, type = 'o', pch=20)
plot(price, type = 'o', pch='*',col='orange',cex=1.5)
plot(price, type = 'o', pch='*',col='green',cex=1.5, lwd=3)
#시계열 데이터 : 시간의 흐름에 따라 관찰된 데이터
data("WWWusage")
str(WWWusage)
plot(WWWusage)
kwData <- c(200,230,220,200,180,270,340,400,380,300,260,230)
plot(kwData)
tskwData <- ts(kwData, start = 1)
plot(tskwData)
