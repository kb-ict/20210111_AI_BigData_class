pi(10)
pi(10)
pi(10)
.libPaths()
runif(5,0,1)
coinTest <- function(n){
r <- runif(n,0,1)
res <- c()
for (i in 1:n) {
if (r[i] <= 0.5) {
res[i] <- 0
}
else {
res[i] <- 1
}
}
return(res)
}
res <- coinTest(5)
res
hist(res)
monteTest <- function(n) {
cnt <- 0
for (i in 1:n) {
cnt <- cnt + coinTest(1)
}
result <- cnt / n
return(result)
}
monteTest(2)
monteTest(10000)
monteTest(1000000)
library(readxl)
exdata1 <- read_excel('res/sample1/xlsx')
exdata1 <- read_excel('res/sample1.xlsx')
View(exdata1)
dim(exdata1)
ls(exdata1)
str(exdata1)
install.packages("dplyr")
library('dplyr')
exdata1 <- rename(exdata1, Y17_AMT=AMT17,
Y16_AMT=AMT16)
View(exdata1)
exdata1$AMT_NEW <- exdata1$Y17_AMT + exdata1$Y16_AMT
exdata1$CNT_NEW <- exdata1$Y17_CNT + exdata1$Y16_CNT
View(exdata1)
exdata1$AVG_AMT <- exdata1$AMT_NEW / exdata1$CNT_NEW
View(exdata1)
exdata1$AVG_GR <-
ifelse(exdata1$AGE >= 50, 'A1',
ifelse(exdata1$AGE >= 40, 'A2',
ifelse(exdata1$AGE >= 30, 'A3',
ifelse(exdata1$AGE >= 20, 'A4', 'A5'))))
View(exdata1)
exdata1 %>% select(ID)
exdata1 %>% select(ID, AREA, Y17_CNT)
exdata1 %>% select(-AREA)
exdata1 %>% select(-ID, -GENDER, -AGE)
exdata1 %>% filter(AREA == '서울')
exdata1 %>% filter(AREA == '서울' & Y17_CNT >= 10)
exdata1 %>% arrange(AGE)
exdata1 %>% arrange(desc(AGE))
exdata1 %>% summarise(TOT_Y17_AMT=sum(Y17_AMT))
exdata1 %>% group_by(AREA) %>% summarise(SUM_AMT17_BY_AREA=sum(Y17_AMT))
mData <- read_excel('res/sample1_m.xlsx')
View(mData)
fData <- read_excel('res/sample1_f.xlsx')
View(fData)
exdata1_bindjoin <- bind_rows(mData, fData)
View(exdata1_bindjoin)
mData <- read_excel('res/sample1_m.xlsx')
View(mData)
fData <- read_excel('res/sample1_f.xlsx')
View(fData)
exdata1_bindjoin <- bind_rows(mData, fData)
View(exdata1_bindjoin)
jeju_y17 <- read_excel('res/sample1_jeju_17.xlsx')
View(jeju_y17)
jeju_y16 <- read_excel('res/sample1_16.xlsx')
View(jeju_y16)
bind_col <- left_join(jeju_y17, jeju_y16, by='ID')  # 참조키 역활 : ID
View(bind_col)
bind_col_inner <- inner_join(jeju_y17, jeju_y16, by='ID')
View(bind_col_inner)
bind_col_full <- full_join(jeju_y17, jeju_y16, by='ID')
View(bind_col_full)
bind_col2 <- right_join(jeju_y17, jeju_y16, by='ID')
View(bind_col2)
x1 <- c(1,2,3,4,5,6,100)
# 평균
mean(x1)
avg <- x1/7
avg
data <- c(10,20,5,4,40,7,NA,6,3,NA,2,NA)
na <- function(x) {
print(x)
print(mean(x, na.rm=T))
}
na(data)
data <- c(10,20,5,4,40,7,NA,6,3,NA,2,NA)
na <- function(x) {
print(x)
print(mean(x, na.rm=T))    # NA를 remove한 평균값
data = ifelse(!is.na(x), x, 0)
print(data)
print(mean(data))
}
na(data)
data <- c(10,20,5,4,40,7,NA,6,3,NA,2,NA)
na <- function(x) {
print(x)
print(mean(x, na.rm=T))                               # NA를 remove한 평균값
#print(median(x,na.rm=T))
data = ifelse(!is.na(x), x, 0)
print(data)
print(mean(data))
data2 = ifelse(!is.na(x), x,
round(mean(x, na.rm = T), 2))
print(data2)
print(mean(data2))
}
na(data)
#============================[중앙값(중위수)]===================================
# 가운데 2개의 값을 더해서 2로 나눈 값
x2 <- c(1,2,3,4,5,100)
median(x2)
max(x2)
min(x2)
range(x2)
#============================[분위수(변위값)]===================================
# 1사분위수(Q1), 2사분위수(Q3), 3사분위수(Q3)
quantile(x2)
quantile(x2, probs = 0.25)
quantile(x2, probs = 0.5)
quantile(x2, probs = 0.75)
quantile(x2, probs = 0.8)
#==============================[표준 편차]======================================
# 표준편차 = 평균값에 대한 오류(오차)
# 실제 데이터 값이 평균을 기준으로 할 때의 분포값
sd(x2)
# 분산 = 표준편차 제곱의 합
var(x2)
x <- c(7,5,12,9,15,6)
var_sd <- function(x) {
var <- sum(x - mean(x)/2) / (length(x)-1)
sd <- sqrt(var)
cat('분산: ',var, '\n')
cat('표준편차: ',sd)
}
var_sd(x)
install.packages("fBasics")
library(fBasics)
# 통계량이 0보다 크면 정규분포 대비 뾰족한 형태
# 0보다 작으면 정규분포 대비 평평한 형태
kurtosis(x)
# x변수의 왜도 = 데이터 분포의 비대칭성
# 통계량의 절대값이 클수록 비대칭이 심함
# +값이면 오른쪽으로 꼬리가 길고,
# -값이면 왼쪽으로 꼬리가 긴 형태
skewness(x)
install.packages("reshape2")
library(reshape2)
head(airquality)
airquality
names(airquality) <- tolower(airquality)
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
names(airquality) <- tolower(airquality)
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
head(melt_test2)
str(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
library(reshape2)
airquality
head(airquality)
names(airquality) <- tolower(airquality)
melt_test <- melt(airquality)
library(reshape2)
airquality
head(airquality)
names(airquality) <- tolower(airquality)
library(reshape2)
airquality
head(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
melt_test2 <- melt(airquality,
id.vars = c('Month','Wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
library(reshape2)
airquality
head(airquality)
melt_test2 <- melt(airquality,
id.vars = c('Month','Wind'),           # 기준열
measure.vars = 'Ozone')                # 변환열
head(melt_test2)
#names(airquality) <- tolower(airquality)
#melt_test <- melt(airquality)
#head(melt_test)
str(airquality)
x <- c(7,5,12,9,15,6)
var_sd <- function(x) {
# 데이터가 평균적으로 퍼져있는 정도
n <- length(x)
var <- sum(x)/n
sd <- sqrt(sum((x-var)^2)/(n-1))
cat('분산: ',var, '\n')
cat('표준편차: ',sd)
}
var_sd(x)
x <- c(7,5,12,9,15,6)
var_sd <- function(x) {
# 데이터가 평균적으로 퍼져있는 정도
n <- length(x)
var <- sum((x-mean(x))^2)/(n-1)
sd <- sqrt(var)
cat('분산: ',var, '\n')
cat('표준편차: ',sd)
}
var_sd(x)
x <- c(1,2,3,4,5,10)
var_sd <- function(x) {
# 데이터가 평균적으로 퍼져있는 정도
n <- length(x)
var <- sum((x-mean(x))^2)/(n-1)
sd <- sqrt(var)
cat('분산: ',var, '\n')
cat('표준편차: ',sd)
}
var_sd(x)
melt_test3 <- melt(airquality,
id.vars = c("Month","Day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(melt_test3)
library(reshape2)
airquality
names(airquality) <- tolower(airquality)
melt_test <- melt(airquality)
library(reshape2)
airquality
names(airquality) <- tolower(names(airquality))
library(reshape2)
View(airquality)
names(airquality) <- tolower(names(airquality))
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
head(melt_test2)
melt_test3 <- melt(airquality,
id.vars = c("month","day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(melt_test3)
library(reshape2)
View(airquality)
melt_test3 <- melt(airquality,
id.vars = c("Month","Day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(melt_test3)
x <- c(1,2,3,4,5,10)
var_sd <- function(x) {
# 데이터가 평균적으로 퍼져있는 정도
n <- length(x)
var <- sum((x-mean(x))^2)/(n-1)
sd <- sqrt(var)
cat('분산: ',var, '\n')
cat('표준편차: ',sd)
}
var_sd(x)
melt_test3 <- melt(airquality,
id.vars = c("Month","Day"),
variable.name = "climate_variable",
value.name = "climate_value")
library(reshape2)
View(airquality)
head(airquality)
melt_test3 <- melt(airquality,
id.vars = c("Month","Day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(melt_test3)
# acast() : vector, matrix, array 변환
# dcast() : data frame 변환
aq_melt <- melt(airquality, id=c("month","day"),
na.rm=T)
library(reshape2)
head(airquality)
names(airquality) <- tolower(names(airquality))
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
melt_test2 <- melt(airquality,
id.vars = c('month','wind'),           # 기준열
measure.vars = 'ozone')                # 변환열
head(melt_test2)
melt_test3 <- melt(airquality,
id.vars = c("Month","Day"),
variable.name = "climate_variable",
value.name = "climate_value")
# acast() : vector, matrix, array 변환
# dcast() : data frame 변환
aq_melt <- melt(airquality, id=c("month","day"),
na.rm=T)
head(aq_melt)
aq_dcast <- dcast(aq_melt, month + day ~ variable)
class(aq_dcast)
head(aq_dcast)
head(airquality)
head(aq_melt)
#===============================================================================
acast(aq_melt, day ~ month ~ variable)
acast(aq_melt, month ~ variable ~ mean)
#===============================================================================
acast(aq_melt, day ~ month ~ variable)
acast(aq_melt, month ~ variable ~ mean)
#===============================================================================
acast(aq_melt, day ~ month ~ variable)
acast(aq_melt, month ~ variable ~ mean)
# 2. 모든 NA값 제거 후, 각 월별로 측정값들의 평균
# 3. 5월달 평균 온도, 풍속
# 4. ozone 5월달의 합, 평균, 분산, 표준편차
# (NA값 제거,각각 R기본함수와 사용자 정의 함수 사용)
# 5. 5월 7일 데이터 출력
# 6. 5/1 ~ 5/6까지 오존농도
# 7. 기온이 가장 높은 날짜를 기준으로 출력 (which max)
# 8. 기온이 가장 높은 날의 모든 데이터 출력
# 9. 6월달에 발생한 가장 강한 바람의 세기 출력
#===============================================================================
airquality[which.max(airquality$temp),c('month','day')]
#===============================================================================
# 정규분포 = 동일한 확률을 가진 변수들이 적당히 크면, 해당 변수들의 평균은
#           일정한 패턴을 가지는 분포
library(fBasics)
# x변수 첨도 = 데이터 분포가 뾰족한 정도
# 통계량이 0보다 크면 정규분포 대비 뾰족한 형태
# 0보다 작으면 정규분포 대비 평평한 형태
kurtosis(x)
library(reshape2)
View(airquality)
head(airquality)
# 문제1)
is.na(airquality$Ozone)
# 문제1)
sum(is.na(airquality$Ozone))
Ozone_1 <- na.omit(airquality$Ozone)
View(Ozone_1)
Ozone_1
View(airquality$Solar.R)
sum(Ozone_1)
mean(Ozone_1)
sd(Ozone_1)
length(Ozone_1)
n <- length(Ozone_1)
n
sd(Ozone_1)
n <- sd(Ozone_1)
n
n^2
var <- n^2
var
#===============================================================================
str(airquality)
airquality[airquality$Month==5 $ airquality$Day==7,]
airquality[airquality$month==5 $ airquality$day==7,]
#===============================================================================
str(airquality)
airquality[airquality$month==5 $ airquality$day==7,]
airquality[airquality$month==5 & airquality$day==7,]
library(reshape2)
#===============================================================================
str(airquality)
airquality[airquality$month==5 & airquality$day==7,]
View(airquality)
head(airquality)
#===============================================================================
str(airquality)
airquality[airquality$month==5 & airquality$day==7,]
airquality[airquality$Month==5 & airquality$Day==7,]
#===============================================================================
# 1번
str(airquality)
class(airquality)
#===============================================================================
# 1번
names(airquality) <- tolower(names(airquality))
str(airquality)
class(airquality)
sum(airquality$ozone, na.rm = T)
mean(airquality$ozone, na.rm = T)
var(airquality$ozone, na.rm = T)
sd(airquality$ozone, na.rm = T)
#===============================================================================
# 9번
wind6 <- subset(airquality, month=6, select = wind)
wind6
wind6$wind
wind6[which.max(wind6$wind),]
#===============================================================================
# 9번
wind6 <- subset(airquality, month==6, select = wind)
View(wind6)
wind6
wind6$wind
class(wind6)
class(wind6$wind)
library(dplyr)
mtcars
nrow(mtcars)                           # 행 개수
str(mtcars)
filter(mtcars, cyl=4)
filter(mtcars, cyl==4)
filter(mtcars, cyl >= 6 & mpg > 20)
arrange(mtcars, wt, desc(hp))          # wt를 기준으로 내림차순
arrange(mtcars, wt, desc(hp))          # wt를 기준으로 오름차순, hp는 내림차순
head(arrange(mtcars, wt, desc(hp)))          # wt를 기준으로 오름차순, hp는 내림차순
head(arrange(mtcars, mpg, desc(wt)))
select(mtcars, am, gear)
select(mtcars, mpg, cyl, carb)
mutate(mtcars, years='1974')
head(mutate(mtcars, mpg_rank=rank(mpg)))
distinct(mtcars, cyl)
distinct(mtcars, cyl, gear)
summarise(mtcars, cyl_mean=mean(cyl),
cyl_min=min(cyl),
cyl_max=max(cyl))
summarise(mtcars, mean(cyl), min(cyl), max(cyl))
gr_cyl <- group_by(mtcars, cyl)
gr_cyl
# gr_cyl에서 cyl별 개수 요약 정보
summarise(gr_cyl, n())
# gear 중복값을 제외하고 cyl별 개수 요약 정보
summarise(gr_cyl, n_distinct(gear))
sample_n(mtcars, 10)
sample_n(mtcars, 10)
sample_frac(mtcars, 0.2)
# cyl별로 그룹으로 묶고 개수로 요약
group_by(mtcars, cyl) %>% summarise(n())
mp_rank <- mutate(mtcars, mpg_rank=rank(mpg))
arrange(mp_rank, mpg_rank)
mutate(mtcars, mpg_rank=rank(mpg)) %>% arrange(mpg_rank)
install.packages("hflights")
library(dplyr)
#===============================================================================
library(dplyr)
fil_data <- filter(airquality, airquality$month==5)
fil_data
sel_data <- select(fil_data, ozone)                        # 열 정보 추출
sel_data
mean(sel_data$ozone, na.rm = T)
X = c(1:10)
x
X = c(1:10)
print(x)
X <- c(1:10)
print(x)
x <- c(1:10)
print(x)
x
y <- seq(1,10,1)
y
z <- rep(1.10)
z
z <- rep(1,10)
z
z1 <- rep(c(1,2,3),3)
z1
z2 <- rep(c(1,2,3),c(1,2,3))
z2
rm(list = ls())
gc()
options(scipen = 100, digits = 5)
Sys.setenv(LANG= "en")
library(reshape2)
View(airquality)
names(airquality) <- tolower(names(airquality))
melt_test <- melt(airquality)
head(melt_test)
str(airquality)
library(reshape2)
View(airquality)
melt_test <- melt(airquality)
melt_test
library(reshape2)
View(airquality)
melt_test <- melt(airquality)
melt_test
cast_test <- cast(airquality)
cast_test <- cast(melt_test)
cast_test
cast_test <- acast(airquality)
cast_test
library(reshape2)
View(airquality)
cast_test <- dcast(airquality)
