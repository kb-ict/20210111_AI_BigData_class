func1()
print(x)
func2 <- function(){
x <<- 100
print(x)
}
func2()
print(x)
arr <- c(1:12)
array(arr, dim = c(2,2,3),
dimnames = list(c('1행', '2행'),
c('1열', '2열'),
c('1페이지', '2페이지','3페이지')))
vec1 <- rep('R',5)
vec1
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(i)
}
vec2 <- rep('i',3)
vec2
#3번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(rep(i,3))
}
#============================[연습 문제]========================================
# 1. 'R'문자가 5회 반복 처리되는 벡터 : rep() 함수 사용
# 2. 1~10까지 3간격으로 연속되는 벡터 : seq() 함수
# 3. 1~10까지 3간격으로 연속된 정수가 3회 반복 : rep() 함수
# 4. 2,3번이 모두 포함되는 벡터
# 5. 4번에서 홀수번째 값들만 저장하는 벡터
#===============================================================================
# 1번
vec1 <- rep('R',5)
vec1
# 2번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(i)
}
# 3번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(rep(i,3))
}
# 3번
vec2 <- seq(1,10,by=3)
vec3 <- rep(vec2,3)
vec3
install.packages("readxl")
# 1번
exam <-c('2021-04-29','2021-04-30','2021-05-01',
'수입3000원','수입4500원','수입5500원')
exam
# 1번
exam <-c('2021-04-29','2021-04-30','2021-05-01',
'수입3000원','수입4500원','수입5500원')
exam
str_extract_all(exam,'[0-9]{4}[가-힣]{1}')
library(readxl)
library(xlsx)
# 1번
exam <-c('2021-04-29','2021-04-30','2021-05-01',
'수입3000원','수입4500원','수입5500원')
exam
str_extract_all(exam,'[0-9]{4}[가-힣]{1}')
install.packages("xlsx")
library(readxl)
library(xlsx)
excelData <- read_excel('res/data_ex.xlsx')
View(excelData)
studentx <- read.xlsx(file.choose(),sheetIndex = 1,encoding = 'UTF-8')
# 1번
exam <-c('2021-04-29','2021-04-30','2021-05-01',
'수입3000원','수입4500원','수입5500원')
exam
str_extract_all(exam,'[0-9]{4}[가-힣]{1}')
# 2번
str_replace_all(exam,'-','/')
install.packages('stringr')
library(stringr)
# 1번
exam <-c('2021-04-29','2021-04-30','2021-05-01',
'수입3000원','수입4500원','수입5500원')
exam
str_extract_all(exam,'[0-9]{4}[가-힣]{1}')
# 2번
str_replace_all(exam,'-','/')
# 3번
exam3 <-list(kor=c(100,95,90),
eng=c(90,85,80),
math=c(95,90,85))
exam3
# 샘 코드
kor <- c(100,90,80)
eng <- c(95,85,90)
math <- c(85,80,100)
# 4번
exam4 <-data.frame(kor,eng,math)
exam4
# 3번
exam3 <-list(kor=c(100,95,90),
eng=c(90,85,80),
math=c(95,90,85))
exam3
# 4번
exam4 <-data.frame(kor,eng,math)
exam4
# 5번
exam5 <-apply(exam4,1,max)
exam5
exam6 <-apply(exam4,2,max)
exam6
#===============================================================================
txtData <- read.table('res/data_ex.txt')
View(txtData)
#===============================================================================
txtData <- read.table('res/data_ex.txt')
#===============================================================================
txtData <- read.table('res/data_ex.txt')
View(txtData)
txtData <- read.table('res/data_ex.txt')
View(txtData)
textData1 <- read.table('res/data_ex1.txt',
header = TRUE,
sep = ',')
View(txtData)
varName <- c('ID','성별','나이','지역')
txtVar <- read.table('res/data_ex2.txt',
sep = ',',
col.names = varName)
textData1 <- read.table('res/data_ex1.txt',
header = TRUE,
sep = ',')
View(txtData)
varName <- c('ID','성별','나이','지역')
txtVar <- read.table('res/data_ex2.txt',
sep = ',',
col.names = varName)
textData1 <- read.table('res/data_ex1.txt',
header = TRUE,
sep = ',')
View(txtData1)
View(textData1)
varName <- c('ID','성별','나이','지역')
txtVar <- read.table('res/data_ex2.txt',
sep = ',',
col.names = varName)
varName <- c('ID','성별','나이','지역','기타')
txtVar <- read.table('res/data_ex2.txt',
sep = ',',
col.names = varName)
View(txtVar)
# .rda(통계용 파일)
id <- c(1,2,3,4,5)
name <- c('홍길동','김길동','이길동','박길동','최길동')
rdaData <- data.frame(ID=id, NAME=name)
# rda file 저장
save(rdaData, file='res/data_ex.rda')
load("D:/20210111_AI_BigData_class/홍성인/R_Project_2021/res/data_ex.rda")
load('res/data_ex.rda')
View(rdaData)
id <- c(1,2,3,4,5)
name <- c('홍길동','김길동','이길동','박길동','최길동')
dataCsv <- data.frame(ID=id,NAME=name)
write.csv(dataCsv, file = 'res/data_ex.csv')
dataTxt <- data.frame(ID=id, NAME=name)
write.table(dataTxt,file = 'res/data_ex_sav.txt')
titanic <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv')
titanic
# data의 차수 확인
dim(titanic)
str(titanic)
table(titanic)
table(titanic$sex)
table(titanic$survived)
head(titanic)
tail(titanic)
# 교차 분할표
tab <- table(titanic$survived, titanic$sex)
tab
plot(tab, col=c('green','blue'),
main='성별에 따른 생존 여부')
barplot(tab, col = c('green','blue'),
main = '성별에 따른 생존 여부')
plot(tab, col=c('green','blue'),
main = '성별에 따른 생존 여부')
barplot(tab, col = c('green','blue'),
main = '성별에 따른 생존 여부')
write.table(titanic, 'res/titanic.txt',
row.names = FALSE)
titanic <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv')
titanic
titanicDf <- read.table(file = 'res/titanic.txt',
sep='',header = T)
View(titanicDf)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = F)
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(x=titanicDf, path = 'res/titanic.xlsx',
col_names = T)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = T)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = F)
write.csv(titanicDf, 'res/titanic.csv',
row.names = T, quote = F)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = F)
write_xlsx(x=titanicDf, path = 'res/titanic.xlsx',
col_names = T)
library(writexl)
write_xlsx(x=titanicDf, path = 'res/titanic.xlsx',
col_names = T)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = T)
# 교차 분할표
tab <- table(titanic$survived, titanic$sex)
titanic <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv')
titanic
# data 차수 확인
dim(titanic)
# data 구조 확인
str(titanic)
# 교차 분할표
tab <- table(titanic$survived, titanic$sex)
tab
plot(tab, col=c('green','blue'),
main = '성별에 따른 생존 여부')
barplot(tab, col = c('green','blue'),
main = '성별에 따른 생존 여부')
write.table(titanic, 'res/titanic.txt',
row.names = FALSE)
titanicDf <- read.table(file = 'res/titanic.txt',
sep='',header = T)
View(titanicDf)
write.csv(titanicDf, 'res/titanic.csv',
row.names = F, quote = T)
library(writexl)
write_xlsx(x=titanicDf, path = 'res/titanic.xlsx',
col_names = T)
library(writexl)
write_xlsx(x=titanicDf, path = 'res/titanic.xlsx',
col_names = T)
runif(5,min = 0,max = 1)
runif(5,min = 0,max = 2)
runif(5,min = 0,max = 1)
coin <- function(){
x <- runif(1)
if (x<0.5){
face <- 1
} else {
face <- 0
}
return(face)
}
coin(3)
coin()
coin()
coin()
coin()
coin()
coin()
coin()
View(coin())
pie(coin())
pie(coin(20))
coin()
# 문제 2번
coin1 <- function(){
y <- runif(20,min = 0,max = 1)
if (y<0.5){
face <- 1
} else {
face <- 0
}
return(face)
}
coin1()
# 문제 1번
coin <- function(){
x <- runif(1)
if (x<0.5){
face <- 1
} else {
face <- 0
}
return(face)
}
coin()
coin1()
face <- 1
# 문제 2번
coin1 <- function(){
y <- runif(20,min = 0,max = 1)
if (y<0.5){
face <- 1
} else {
face <- 0
}
return(face)
}
coin1()
# 문제 1번
coin <- function(){
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
coin()
coin()
# 문제 2번
coin1 <- function(){
y <- round(ruinif(20),1)
if (y<0.5){
face <- '앞면'
} else {
face <- '뒷변'
}
return(face)
}
coin1()
coin1(10)
# 문제 2번
coin1 <- function(){
y <- round(runif(20),1)
if (y<0.5){
face <- '앞면'
} else {
face <- '뒷변'
}
return(face)
}
coin1()
coin1(10)
# 문제 1번
coin <- function(){
x <- runif(20)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
coin()
# 문제 1번
coin <- function(){
x <- runif(10,1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
coin()
# 문제 2번
coin1 <- function(){
y <- runif(20,min = 0,max = 1)
if (y<0.5){
face <- '앞면'
} else {
face <- '뒷변'
}
return(face)
}
coin1()
# 문제 2번
coin1 <- function(){
y <- runif(1)
if (y<0.5){
face <- '앞면'
} else {
face <- '뒷변'
}
return(face)
}
coin1()
# 문제 2번
coin1 <- round(runif(20,0))
coin1
# 문제 1번
coin <- function(){
x <- runif(1,0,2)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
coin()
coin()
# 문제 1번
coin <- function(){
x <- runif(1,0,2)
if (x=1){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
# 문제 1번
coin <- function(){
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
coin()
# 문제 2번
coin1 <- round(runif(20,0))
coin1
coin1
# 문제 2번
coin1 <- round(runif(20,0))
coin1
coin1
coin1
# 문제 2번
coin1 <- round(runif(20,0))
coin1
coin1
coin1
coin1
# 문제 2번
for ( i in 1:20) {
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
# 문제 2번
for ( i in 1:20) {
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
# 문제 2번
coin2<-function(){
for ( i in 1:20) {
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
return(face)
}
}
coin2()
# 문제 2번
coin2<-function(){
for ( i in 1:20) {
x <- runif(1)
if (x<0.5){
face <- '앞면'
} else {
face <- '뒷면'
}
print(face)
}
}
coin2()
# 문제 3번
pi <- function(n) {
counter <- 0;
for (i in 1:n) {
coordinates <- runif(2,-1,1)
if (sqrt(coordinates[1]^2 + coordinates[2]^2) < 1) {
counter <- counter + 1
}
}
return(4*counter/n)
}
pi(1)
pi(1)
pi(1)
pi(10)
pi(10)
pi(10)
