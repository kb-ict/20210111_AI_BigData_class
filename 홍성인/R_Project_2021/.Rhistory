n = 100
n <- 90
n <<- 80
n
print(n)
n = 100
n <- 90
n <<- 80
print(n)
n = 100
n
n <- 90
n
n
print(n)
sprintf("점수: %d",n)
cat("점수: ",n)
x <- 10
y <- 20
z <- x * y
z
# 개행문자(\) 쓸 때는 cat
x <- 10
y <- 20
z <- x * y
cat('x * y의 결과는',z,'입니다.\n')
sprintf('%d * %d = %d',x,y,z)
x <- 10
y <- 20
z <- x * y
cat('x * y의 결과는',z,'입니다.')
sprintf('%d * %d = %d',x,y,z)
x <- 10
y <- 20
z <- x * y
cat('x * y의 결과는',z,'입니다.\n')
sprintf('%d * %d = %d',x,y,z)
x <- 3.0
x
print(x)
sprintf('x:%f', x)
x <- 3.5
x
print(x)
sprintf('x:%f', x)
x <- 3.5
x
print(x)
sprintf('x:%.2f', x)
y <- 'string'
print(y)
y <- "문자열"
y
z <- FALSE # (FALSE, F , TRUE , T)
z <- TRUE
z
10 + 3
10 - 5
2 * 3
10 / 2
8 %% 3
5 %% 4 # 나머지지
5 %% 4 # 나머지
10 %/% 3 # 정수값
2^3 # 거듭제곱곱
2 ^ 3 # 거듭제곱
print('숫자를 입력하세요')
num <- scan()
num
print('숫자를 입력하세요')
num <- scan()
('숫자를 입력하세요')
('숫자를 입력하세요')
num <- scan()
# what 은 '문자열'을 입력받는다.
print('문자열을 입력하세요')
str <- scan(what='')
# what 은 '문자열'을 입력받는다.
print('문자열을 입력하세요')
a <- scan(what='')
print('문자열을 입력하세요')
str <- scan('')
print('문자열을 입력하세요')
str <- scan(a='')
print('문자열을 입력하세요')
str <- scan(a='')
print('문자열을 입력하세요')
str <- scan(a='')
df <- data.frame() # data frame
df <- edit(df)
df
x <- 8
if (x > 0 && x < 10){
print('1~10 사이의 숫자입니다.')
} else {
print('1~10 사이의 숫자가 아닙니다.')
}
if ( x == 1 || x == 10){
print('1이거나 10입니다.')
} else if ( x != 8){
print('8이 아닙니다.')
} else {
sprintf('정보는 %d 입니다.',x)
}
num <- 30
if (is.integer(num)){
print('x는 숫자')
} else {
print('x는 문자열')
}
num <- 30L
if (is.integer(num)){
print('x는 숫자')
} else {
print('x는 문자열')
}
data <- c('홍길동','김길동','박길동','이길동')
if ('박길동' %in% data){
print('박길동이 존재합니다.')
} else {
printf('박길동이 없습니다.')
}
i <- 0
while (i<10){
i <- i + 1
print(i)
}
sum <- 0
for (i in c(1,4,7)) {
print(sum <- sum + i)
}
sum <- 0
for (i in 1:10){
if (i %% 2 == 0){
next;
}
if (i == 7){
break
}
sum <- sum + i
}
print(sum)
index <- seq(1,10,by=2)
for (i in index){
print(i)
}
sum <- 0
num <- c(1,4,7)
for (i in num ) {
print(sum <- sum + i)
}
func1 <- function(start, end) {
sum <- 0
for (i in start:end) {
sum <- sum + i
}
return(sum)
}
sprintf('합계: %d', func1(1,10))
func2_1 <- function(...){
res <- func2(...)
return (res)
}
func2_1(10,5,'+')
func2 <- function(num1, num2, op){
if (op == '+'){
return (num1 + num2)
} else {
return (num1 - num2)
}
}
func2_1 <- function(...){
res <- func2(...)
return (res)
}
func2_1(10,5,'+')
func2_1(20,10,'-')
func_var <- function(...){
var <- c(...)
for (i in var) {
cat(i,'\t')
}
}
func_var(1,2,3,4,5)
func_var <- function(...){
var <- c(...)
for (i in var) {
cat(i,'\t')
}
}
func_var(1,2)
func_var(1,2,3)
func_var(1,2,3,4,5)
x <- 3
func1 <- function(){
x <- 5
print(x)
}
func1()
print(x)
func2 <- function(num1, num2, op){
if (op == '+'){
return (num1 + num2)
} else {
return (num1 - num2)
}
}
func2_2 <- function(num1, num2){
return(num1+num2)
}
x <- 3
func1 <- function(){
x <- 5
print(x)
}
func1()
print(x)
func2 <- function(){
x <<- 100
print(x)
}
func2()
print(x)
x <- 3
func2 <- function(){
x <<- 100
print(x)
}
func2()
print(x)
add_x <- function(x) {
function(y) {
return(x + y)
}
}
addx <- add_x(3)
addx(2)
ex_vector <- c(1,2,3,4,5,6)
ex_vector
print(ex_vector)
ex_vector[c(1,5)]
ex_vector[1:3]
ex_vector <- c('홍길동','김길동','박길동')
ex_vector[c(1,3)]
ex_vector[1:2]
ex_vector <- c(1:6)
matrix(ex_vector, nrow = 2, ncol = 3)    # 1차원 백터를 2차원 매트릭스로 2행 3열로
matrix(ex_vector, nrow = 3, ncol = 2)
matrix(ex_vector, nrow = 3, ncol = 2, byrow = T)
arr <- c(1:12)
array(arr, dim = c(2,2,3)) # 3차원 배열(=2차원 배열이 n개 있음)
array(arr, dim = c(2,2,3),
dimnames = list(c('1행', '2행'),
c('1열', '2열',
'1페이지', '2페이지','3페이지')))
arr <- c(1:9)
array(arr, dim = c(2,2,3),
dimnames = list(c('1행', '2행'),
c('1열', '2열'),
c('1페이지', '2페이지','3페이지')))
arr <- c(1:12)
array(arr, dim = c(2,2,3),
dimnames = list(c('1행', '2행'),
c('1열', '2열'),
c('1페이지', '2페이지','3페이지')))
#===============================================================================
# 질문하기
x <- 3
func1 <- function(){
x <- 5
print(x)
}
func1()
print(x)
func2 <- function(){
x <<- 100
print(x)
}
func2()
print(x)
#===============================================================================
# 질문하기
x <- 3
#===============================================================================
# 질문하기
x <- 3
func1 <- function(){
x <- 5
print(x)
}
func1()
print(x)
func2 <- function(){
x <- 100
print(x)
}
func2()
print(x)
#===============================================================================
# 질문하기
x <- 3
func1 <- function(){
x <- 5
print(x)
}
func1()
print(x)
func2 <- function(){
x <<- 100
print(x)
}
func2()
print(x)
arr <- c(1:12)
array(arr, dim = c(2,2,3),
dimnames = list(c('1행', '2행'),
c('1열', '2열'),
c('1페이지', '2페이지','3페이지')))
vec1 <- rep('R',5)
vec1
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(i)
}
vec2 <- rep('i',3)
vec2
#3번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(rep(i,3))
}
#============================[연습 문제]========================================
# 1. 'R'문자가 5회 반복 처리되는 벡터 : rep() 함수 사용
# 2. 1~10까지 3간격으로 연속되는 벡터 : seq() 함수
# 3. 1~10까지 3간격으로 연속된 정수가 3회 반복 : rep() 함수
# 4. 2,3번이 모두 포함되는 벡터
# 5. 4번에서 홀수번째 값들만 저장하는 벡터
#===============================================================================
# 1번
vec1 <- rep('R',5)
vec1
# 2번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(i)
}
# 3번
vec2 <- seq(1,10,by=3)
for (i in vec2) {
print(rep(i,3))
}
# 3번
vec2 <- seq(1,10,by=3)
vec3 <- rep(vec2,3)
vec3
