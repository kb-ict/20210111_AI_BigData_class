#자료형 확인 함수
is.numeric(x) 수치형 여부
is.logical(x) 논리형 여부
is.character(x) 문자형 여부
is. integer(x) 정수형 여부
is.data.frame(x) 데이터 프레임 여부

#자료형 변환
as.numeric(x) 수치형 변환
as.logical(x) 논리형 변환
as.character(x) 문자형 변환
as. integer(x) 정수형 변환
as.data.frame(x) 데이터 프레임 변환
as.vector(x) 벡터형 변환

x <- c(1, 2, "3")
x
[1] "1" "2" "3"
>result <- as.numeric(x) * 3
>#result <- as.integer(x) * 3 같은 결과 반한
>result
[1] 3 6 9

#자료형과 자료구조 보기
mode() 함수를 이용하여 자료형 확인
class() 함수를 이용하여 자료구조 즉, 메모리 구조 확인

>mode(int)
[1] "numeric"
>class(int)
[1] "numeric"

# R에서 제공하는 주요 자료구조
1) Vector(1차원 배열)
2) Matrix(2차원 배열)
3) Array(다차원 배열)
4) Data Frame(2차원 테이블 구조)
5) List(자료구조 중첩)

# vector(벡터)는 R에서 가장 기본이 되는 자료구조
- 연속된 선형구조의 형태로 만들어지고, 첨자(index)에 의해서 접근할 수 있다
- 변수[첨자(index)] *index는 1부터 시작
- 같은 자료형의 데이터만 저장
- 벡터 생성 함수: c(), seq(), rep()
- 벡터 자료 처리 함수: union(), setdiff(), intersect()

>c(1:10)
[1] 1 2 3 4 5 6 7 8 9 10
>1:10  
# c() 함수와 동일
[1] 1 2 3 4 5 6 7 8 9 10
>c(1, 2, 3, 4, 5) 
#c(1:5)와 동일
[1] 1 2 3 4 5

>seq(1, 10, 2) # squcnce value 함수 1부터 10까지 2씩 증가
[1] 1 3 5 7 9

>rep(1:3,3) # replicate value 함수 
[1] 1 2 3 1 2 3 1 2 3

>rep(1:3, each=3) # each는 각 자료가 반복할 횟수를 지정
[1] 1 1 1 2 2 2 3 3 3

# 벡터 자료 처리
x <- c(1, 3, 5, 7)
y <- c(3, 5)
> union(x, y) # x와 y의 합집합
[1] 1 3 5 7
> setdiff(x, y) # x에 있는데, y에 없는 값
[1] 1, 7
> intersect(x, y) # x와 y에 공통으로 있는 값
[1] 3 5

# 벡터 자료는 반드시 같은 유형의 자료만 하나의 변수에 저장
혼합이 되는 경우 데이터 유형이 변경

# 벡터 객체의 값에 컬럼명 지정
names() 함수를 이용하여 벡터 객체에 저장된 벡터 데이터에 갈럼명을 지정
age <- c(30, 35, 40)
> age
[1] 30 35 40
names(age) <- c("홍", "이", "강") #c()함수로 칼럼명을 만들고, names() 함수로 각 데이터에 칼러명 지정
>age
홍  이   강
30  35  40
>age <- NULL # NULL 값을 대입하여 벡터 객체를 메모리에서 제거

#벡터 자료 참조하기
a <- c(1:20) # 벡터 객체 생성
>a[10:15] #10~15사이의 벡터 원소 출력
[1] 10 11 12 13 14 15
>a[10:(length(a)-5)] # 10부터 백터 전체 길이에서 5 뺀 15만큼 출력
[1] 10 11 12 13 14 15

첨자는 콜론(:)으로 범위를 지정

#c()함수에서 콤마 사용
v1 <- c(13, -5, 20:23 ,12, -1:3)
>v1
[1] 13 -5 20 21 22 23 12 -1 0 1 2 3
>v1[1]
[1] 13
>v1[c(2,4)]
[1] -5 21
>v1[c(3:5)]
[1] 20 21 22
>v1[c(4, 5:8, 7)]
[1] 21 22 23 12 -2 12

#음수 값으로 첨자를 사용하면 여집합의 개념으로 해당 첨자가 제외
>v1[-1]
[1] -5 20 21 22 23 12 -1 0 1 2 3
>v1[-c(2,4)]
[1] 13 20 22 23 12 -1 0 1 2 3
>v1[-c(2:5)]
[1] 13 23 12 -1 0 1 2 3


#Matrix 자료구조 : 행렬 자료구조, 같은 자료형을 갖는 2차원의 배열 구조
- 행렬 생성 함수: matrix(), rbind(), cbind()
- 행렬 자료 처리 함수: apply()

# 백터를 이용한 행렬 객체 생성
> m<-matrix(c(1:5))  # 열을 기준으로 행렬 객체가 만들어짐
> m
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4
[5,]    5

> m <- matrix(c(1:10),nrow=2)
# 열 우선으로 2행
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10

> m <- matrix(c(1:11),nrow=2)
경고메시지(들): 
In matrix(c(1:11), nrow = 2) :
  데이터의 길이[11]가 행의 개수[2]의 배수가 되지 않습니다
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    3    5    7    9   11
[2,]    2    4    6    8   10    1
> m <- matrix(c(1:10),nrow=2, byrow=T)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10

#행 묶음으로 행렬 객체 생성
# rbind()함수
> x1 <- c(5, 40, 50:52)
> x2 <- c(30, 5, 6:8)
> mr <- rbind(x1,x2)
> mr
   [,1] [,2] [,3] [,4] [,5]
x1    5   40   50   51   52
x2   30    5    6    7    8

#열 묶음으로 행렬 객체 생성
# cbind() 함수
> mc <- cbind(x1,x2)
> mc
     x1 x2
[1,]  5 30
[2,] 40  5
[3,] 50  6
[4,] 51  7
[5,] 52  8

#matrix()함수 이용 행렬 객체 생성
> m3 <-matrix(10:19,2)
> m4 <- matrix(10:20,2)
경고메시지(들): 
In matrix(10:20, 2) :
  데이터의 길이[11]가 행의 개수[2]의 배수가 되지 않습니다
> m3
     [,1] [,2] [,3] [,4] [,5]
[1,]   10   12   14   16   18
[2,]   11   13   15   17   19

> m3[1,]
[1] 10 12 14 16 18
> m3[,5]
[1] 18 19
> m3[2,3]
[1] 15
> m3[1,c(2:5)]
[1] 12 14 16 18

> length(m3)
[1] 10
> ncol(m3)
[1] 5
> nrow(m3)
[1] 2

#Array 자료구조: 같은 자료형을 갖는 다차원 배열구조
#배열 생성 함수: array()
> vec <- c(1:12)
> arr <- array(vec, c(3,2,2))
> arr
, , 1

     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

, , 2

     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12

> arr[,,1]
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
> arr[,,2]
     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12

#List 자료구조(자료구조 중첩) 
#다른 자료형과 자료구조(벡터, 행열, 리스트, 데이터프레임)를 객체로 생성
#하나의 메모리 영역에는 키(key)와 값(value)이 한 쌍으로 저장
# 리스트 생성 함수: list()
# 리스트 자료 처리 함수: unlist(), lapply(), sapply()

#Key 생략한 list 생성하기
#기본키는 [[n]] 형식
> list <-list("블랙핑크","제니", 26)
> list
[[1]]
[1] "블랙핑크"

[[2]]
[1] "제니"

[[3]]
[1] 26

 # 리스트를 벡터구조로 변경하기
> unlist <- unlist(list)
> unlist
[1] "블랙핑크" "제니"     "26" 

#key와 value 형식으로 리스트 객체 생성
member <- list(name= c("제니","로제"),age=c(25,26),from=c("뉴질랜드","호주"))

> member
$name
[1] "제니" "로제"

$age
[1] 25 26

$from
[1] "뉴질랜드" "호주"    
--------------------------------------------------
> member$name
[1] "제니" "로제"

> member$age
[1] 25 26

> member$from
[1] "뉴질랜드" "호주"    

> member$name[1]
[1] "제니"

> member$name[2]
[1] "로제"

member$age[1] <- 100  #age key의 첫번째 요소 수정

# age 원소 제거
member$age <-NULL
> member
$name
[1] "제니" "로제"

$from
[1] "뉴질랜드" "호주" 

# 다차원 리스트 객체 생성
multi_list <- list (c1= list(1,2,3),
                    c2=list(10,20,30),
                    c3=list(100,200,300))

> multi_list
$c1
$c1[[1]]
[1] 1

$c1[[2]]
[1] 2

$c1[[3]]
[1] 3


$c2
$c2[[1]]
[1] 10

$c2[[2]]
[1] 20

$c2[[3]]
[1] 30


$c3
$c3[[1]]
[1] 100

$c3[[2]]
[1] 200

$c3[[3]]
[1] 300


> multi_list$c1;multi_list$c2;multi_list$c3
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[1]]
[1] 10

[[2]]
[1] 20

[[3]]
[1] 30

[[1]]
[1] 100

[[2]]
[1] 200

[[3]]
[1] 300
__________________________________________________________
#다차원 리스트Matrix 객체 생성, 열 단위로 바인딩
> do.call(cbind,multi_list)
     c1 c2 c3 
[1,] 1  10 100
[2,] 2  20 200
[3,] 3  30 300

____________________________________________________________
# 데이터프레임 자료구조
# 데이터베이스의 테이블 구조와 유사하다
# 칼럼(열) 단위로 서로 다른 데이터의 저장이 가능하다
# 칼럼은 리스트, 칼럼 내의 데이터는 벡터 자료구조
# 데이터프레임 생성 함수: data.frame(), read.table(), read.csv()
# 자료 처리 함수: str(),ncol(),nrow(), apply()

# 벡터를 이용한 데이터프레임 객체 생성하기
no <- c(1,2,3)
name <-c("hong","lee","kim")
pay <- c(150,250,400)
person <- data.frame(No=no, Name=name, Pay=pay) #칼럼명 지정

> person
  No Name Pay
1  1 hong 150
2  2  lee 250
3  3  kim 400

#matrix를 이용한 데이터프레임 객체 생성하기
> p<-matrix(c(1,"h",450,2,"l",250,3,"k",300),3,byrow=T) #행 우선, 3개의 리스트 생성
> person <- data.frame(p)
> person
  X1 X2  X3
1  1  h 450
2  2  l 250
3  3  k 300

#데이터프레임 만들기
> df <- data.frame(x=c(1:5),y=seq(2,10,2),z=c('a','b','c','d','e'))
> df
  x  y z
1 1  2 a
2 2  4 b
3 3  6 c
4 4  8 d
5 5 10 e

> df$x
[1] 1 2 3 4 5
> df$x[2]
[1] 2

#자료구조 보기
> str(df)
'data.frame':	5 obs. of  3 variables:
 $ x: int  1 2 3 4 5
 $ y: num  2 4 6 8 10
 $ z: chr  "a" "b" "c" "d" ...

#행 수 보기
> ncol(df)
[1] 3
> #열 수 보기
> nrow(df)
[1] 5
> #칼러명 보기
> names(df)
[1] "x" "y" "z"

#특정 행 출력
> df[c(2:3),1]
[1] 2 3

#데이터 프레임 자료에 함수 적용하기
> apply(df[,c(1,2)],2,sum) # 열 단위의 합계
 x  y 
15 30 
# df[,c(1,2)] 데이터프레임 객체 df에서의 x, y 열을 sum()함수 적용
# 두번째 인자인 2는 열단위로 sum()함수를 적용
------------------------------------------------------------------------
#부분 객체 만들기
> #변수 <- subset(데이터프레임, 조건)
> x1 <- subset(df,x>=3) # x가 3 이상인 행을 대상으로 생성
> x1
  x  y z
3 3  6 c
4 4  8 d
5 5 10 e

#두개의 조건으로 부분 객체 만들기
> y1<-subset(df,y<=8) # y가 8이하인 행
> xyand <- subset(df,x>=2&y<=6) #AND 연산으로 2개의 조건 지정
> xyor <- subset(df,x>=2|y<=6)

> y1
  x y z
1 1 2 a
2 2 4 b
3 3 6 c
4 4 8 d

> xyand
  x y z
2 2 4 b
3 3 6 c

> xyor
  x  y z
1 1  2 a
2 2  4 b
3 3  6 c
4 4  8 d
5 5 10 e

-------------------------------------------------------------------------
#stdent dataframe 만들기
> #벡터 객체 생성
> sid =c("A","B","C","D")
> score=c(90,80,70,60)
> subject=c("컴퓨터","국어국문","소프트웨어","유아교육")
> student <- data.frame(sid,score,subject)
> student
  sid score    subject
1   A    90     컴퓨터
2   B    80   국어국문
3   C    70 소프트웨어
4   D    60   유아교육

#자료형과 자료구조 보기
> mode(student);class(student)
[1] "list"
[1] "data.frame"

> str(sid);str(score);str(subject)
 chr [1:4] "A" "B" "C" "D"
 num [1:4] 90 80 70 60
 chr [1:4] "컴퓨터" "국어국문" "소프트웨어" "유아교육"

> str(student)
'data.frame':	4 obs. of  3 variables:
 $ sid    : chr  "A" "B" "C" "D"
 $ score  : num  90 80 70 60
 $ subject: chr  "컴퓨터" "국어국문" "소프트웨어" "유아교육"

# 두 개 이상의 데이터프레임 병합
> height <- data.frame(id=c(1,2),h=c(180,185))
> weight <- data.frame(id=c(1,2),W=c(80,75))
> user <- merge(height,weight,by.x="id",by.y="id")
> user
  id   h  W
1  1 180 80
2  2 185 75
> user1 <- merge(height, weight,by="id")
> user1
  id   h  W
1  1 180 80
2  2 185 75