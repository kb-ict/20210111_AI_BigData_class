# ctrl + Enter : 1라인 또는 선택영역 실행 
# ctrl + Alt + R : 전체 실행
# ctrl + Alt + B : 처음에서 현재 행까지 실행
# ctrl + Alt + E : 현재행에서 마지막까지 실행

# 주석처리 : ctrl + shift + C
# 변수 값 할당 방법 3가지
n = 100 #1
n <- 90 #2
n <<-80 #3
# 변수 출력하기
n
print(n)
--------------------------------------
> n = 100
> n <- 90
> n <<-80
> n
[1] 80
> print(n)
[1] 80

# 출력 방법
#sprintf 와 Cat 출력 형태 차이점
sprintf("점수: %d", n)
cat("점수: ", n)
-----------------------------------------
> sprintf("점수: %d", n)
[1] "점수: 90"
> cat("점수: ", n)
점수:  90
______________________________________________

x <- 10
y <- 20
z <- x * y
cat('x * y의 결과는 ', z, '입니다.\n')
sprintf('%d * %d = %d', x, y, z)
------------------------------------
> x <- 10
> y <- 20
> z <- x * y
> cat('x * y의 결과는 ', z, '입니다.\n')
x * y의 결과는  200 입니다.
> sprintf('%d * %d = %d', x, y, z)
[1] "10 * 20 = 200"
_________________________________________

x<-3.0
x
print(x)
sprintf('x: %f', x)
------------------------------------
> x<-3.0
> x
[1] 3
> print(x)
[1] 3
> sprintf('x: %f', x)
[1] "x: 3.000000"

__________________________________________
#문자열
y <-'String'
print(y)
y <- "문자열"
y
-----------------------------------------
> y <-'String'
> print(y)
[1] "String"
> y <- "문자열"
> y
[1] "문자열"

____________________________________________
#논리형
#(FALSE, F, TRUE, T)

z <- FALSE 
z <- TRUE
z
-------------------------------------------
> z
[1] TRUE
_________________________________________________
10+3
10-5
2*3
4/3
4 %/% 3 #정수값 소수점 버림
4 %% 3 #나머지 연산자
2^3 #거듭제곱 연산자
-------------------------------------------------------
> 10+3
[1] 13
> 10-5
[1] 5
> 2*3
[1] 6
> 4/3
[1] 1.333333
> 4 %/% 3 #정수값
[1] 1
> #나머지 연산자
> 4 %% 3
[1] 1
> 2^3 #거듭제곱곱
[1] 8
_______________________________________________________
#data 입력
#scan(): 숫자를 입력받는 표준입력함수
print('숫자를 입력하세요')
num <- scan()
num
-----------------------------------------------
> print('숫자를 입력하세요')
[1] "숫자를 입력하세요"
> num <- scan()
1: 100
2: 200
3: 300
4:            #enter
Read 3 items
> num
[1] 100 200 300

> num <- scan()
1: 10
2: 20
3: 30
4: 
Read 3 items
> num
[1] 10 20 30

num [1:3] 10 20 30
﻿#R의 배열 인덱스 값은 1부터 시작한다!
____________________________________________________
﻿
#문자열 입력함수

print('문자열을 입력하세요.')

str <- scan(what='')

str


------------------------------------------

[1] "문자열을 입력하세요."

> str <- scan(what='')

1: yj

2:

Read 1 item

> str

[1] "yj"


[1] "문자열을 입력하세요."

> str <- scan(what='')

1: 23123

2:

Read 1 item

> str

[1] "23123"

﻿_____________________________________________________
#데이터 프레임
df <- data.frame()
df <- edit(df)
df

> df
  국어 영어 수학
1  100   90   80
2   90   98   89

df 2 obs. of 3 variables

#변수의 값이 할당되어야 변수의 자료형이 결정되어진다.
______________________________________________________________
#제어문 & 논리문
x <- 8
if(x > 0 && x < 10){
  print('1~10 사이의 숫자입니다.')
}else{
  print('1~10 사이의 숫자가 아닙니다.')
}
----------------------------------------------------
> x <- 8
> if(x > 0 && x < 10){
+   print('1~10 사이의 숫자입니다.')
+ }else{
+   print('1~10 사이의 숫자가 아닙니다.')
+ }
[1] "1~10 사이의 숫자입니다."
________________________________________________________
values x 8

if(x==1 || x==10){
  print('1이거나 10 입니다.')
}else if(x!=8){
  print('8이 아닙니다.')
}else{
  sprintf('정보는 %d 입니다.',x)
}
-----------------------------------
[1] "정보는 8 입니다."
__________________________________________________________
num <- 30
if(is.integer(num)){
  print('x는 숫자')
}else{
  print('x는 문자열')
}
--------------------------------------------
[1] "x는 문자열"
--------------------------------------------
num <- 30L
if(is.integer(num)){
  print('x는 숫자')
}else{
  print('x는 문자열')
}
--------------------------------------------
[1] "x는 숫자"
_________________________________________________
#vector: 백터는 배열과 동일한 개념
#백터 배열과 같이 여러 개의 자료를 저장할 수 있는 1차원의 선형 자료구조 

data <- c('제니','리사','로제','지수')
if('로제' %in% data){
  print('로제는 블랙핑크 멤버입니다')
}else{
  print('로제는 없습니다.')
}
--------------------------------------------
[1] "로제는 블랙핑크 멤버입니다"

data chr [1:4] "제니" "리사" "로제" "지수"

#스칼라 변수:한 개의 값만 갖는 변수 
#데이터 프레임
________________________________________________

#반복문 while
i <- 0
while (i<10){
  i<- i+1
  print(i)
}
---------------------
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
______________________________________________
#향상된 for문
sum <-0
for(i in c(1,4,7)){
  print(sum<-sum+i)
}
-----------------------------------------
[1] 1
[1] 5
[1] 12
______________________________________________

sum<-0
for(i in 1:10){  #[1] 1 2 3 4 5 6 7 8 9 10
  if(i %% 2 == 0){
    next #coutine와 동일
  }
  if(i == 7){
    break   # i=7이면 반복문 탈출
  }
  sum <-sum + i
}
print(sum)
----------------------------------------------
> print(sum)
[1] 9    #(1 + 3 + 5)
_______________________________________________
index <- seq(1, 10, by =2) # num [1:5] 1 3 5 7 9
for(i in index){
  print(i)
}
-------------------------------------------------
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9
________________________________________________
#사용자 정의 함수
#c언어의 함수 포인터와 동일한 개념

func1 <- function(start, end){
  sum <-0
  for( i in start:end){
    sum <- sum + i
  }
  return (sum)
}
sprintf('합계: %d', func1(1,10))
------------------------------------------
> sprintf('합계: %d', func1(1,10))
[1] "합계: 55"
________________________________________________
# 사용자 정의 함수 (가변인자)

func2 <- function(num1, num2, op){
  if(op=='+'){
    return(num1+num2)
  }else{
    return (num1- num2)
  }
}
func2_1<-function(...){#가변인자
  res <- func2(...)
  return(res)
}
func2_1(10,5,"+")
func2_1(20,10,'-')
func2(10,5,'+')
----------------------------
> func2_1(10,5,"+")
[1] 15
> func2_1(20,10,'-')
[1] 10

> func2(10,5,'+')
[1] 15
_____________________________________________

func_var <- function(...){
  var <- c(...)
  for(i in var){
    cat(i,'\t')
  }
}
func_var(1,2,3,4,5)  # var num[1:5] 1 2 3 4 5
-------------------------------------------
> func_var(1,2,3,4,5)
1 	2 	3 	4 	5 

> func_var(2,3,42,1,6)
2 	3 	42 	1 	6 
_____________________________________________

#전역 변수 와 지역 변수
x <- 3 # 전역변수
func1 <- function(){
  x <- 5 #함수(중괄호)내 선언된 변수, 지역변수
  print(x)
}
func1()
print(x)  #  values x 3, 전역변수 출력
------------------------------------------------
> func1()
[1] 5
> print(x)
[1] 3
_________________________________________
func2 <- function(){
  x <<- 100 # <<- 전역변수를 가르킴, 전역변수를 재사용
  print(x)
}
func2()
print(x)

-------------------------------------------
> func2()
[1] 100
> print(x)
[1] 100
_______________________________________
#R은 인터프리터, 스크립트 언어

#클로저
add_x <- function(x){
  function(y){
    return (x+y)
  }
}
addx <- add_x(3)           #function(x)의 매개변수에 3
addx(2)                    #function(y)의 매개변수에 2 전달
print(addx)

-------------------------------------------
> addx <- add_x(3)
> addx(2)
[1] 5
> print(addx)
function(y){
    return (x+y)
  }
<environment: 0x0000021880562148>