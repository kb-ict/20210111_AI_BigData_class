Numpy
다차원 배열을 효과적으로 처리할 수 있도록 도와주는 도구
현실 세계의 다양한 데이터는 배열형태로 표현 가능

Numpy의 차원
- 1차원 (행): axis 0 => Vector
- 2차원 (열): axis 1 => Matrix
- 3차원 (채널): axis 2 => Tensor(3차원이상)

1. List를 Numpy로 바꾸어 보기
import numpy as np
def doA():
    array= np.array([1,2,3]) 
    print(array.size)# 배열의 크기
    print(array.dtype) #배열 원소의 타입
    print(array[1]) #인덱스 1의 원소

3
int32
2

--------------------------------------
2. Numpy 배열 초기화하기
import numpy as np
def doB():
# 0부터 3까지의 배열 만들기
    ar1= np.arange(4)

# 4행4열, 원소 타입 float, 0으로 초기화
    ar2= np.zeros((4,4),dtype=float)

# 3행3열 문자열 타입 1으로 초기화
    ar3= np.ones((3,3), dtype=str)

# 0부터 9까지 랜덤하게 초기화 된 배열 3행3열
    ar4= np.random.randint(0,10,(3,3))

# 평균이 0이고 표준편차가 1인 표준 정규를 띄는 배열 
    ar5= np.random.normal(0,1,(3,3))

    print('ar1= ',ar1)
    print('ar2= ',ar2)
    print('ar3= ',ar3)
    print('ar4= ',ar4)
    print('ar5= ',ar5)

ar1=  [0 1 2 3]
ar2=  [[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
ar3=  [['1' '1' '1']
 ['1' '1' '1']
 ['1' '1' '1']]
ar4=  [[8 4 4]
 [7 2 5]
 [6 3 9]]
ar5=  [[ 0.75514308  0.30631954  0.67640695]
 [-0.3754999  -0.79938302  0.83495856]
 [ 1.0541117  -1.94470025  0.5703035 ]]

Process finished with exit code 0
--------------------------------------------------------------
3. Numpy 배열 합치기

import numpy as np
def test():
    ar1= np.array([1,2,3])
    ar2= np.arange(4,7) #4부터 6까지 배열
# 배열 ar1과 ar2 합치기 
    ar3= np.concatenate([ar1,ar2]) 
    print(ar2)
# shape은 해당 배열 차원 알려줌
    print(ar2.shape)
    print(ar3.shape)
    print(ar3)

-------------------------------------------------------------------
4. 배열 형태 바꾸기

import numpy as np
def test():
    ar1= np.array([1,2,3,4])
# reshape((행,열)) 지정한 행과 열로 형태 변경
    ar2= ar1.reshape((2,2))
    print(ar1)
    print(ar2)
    print(ar2.shape)


[1 2 3 4]
[[1 2]
 [3 4]]
(2, 2)

-----------------------------------------------------------------
5. 배열 가로 축으로 합치기(행)
import numpy as np
def test():
    ar1= np.arange(4).reshape(1,4)
    ar2= np.arange(8).reshape(2,4)
# axis=0은 행 기준으로 합치기
    ar3= np.concatenate([ar1,ar2],axis=0)
    print(ar3)
    print(ar3.shape)

[[0 1 2 3]
 [0 1 2 3]
 [4 5 6 7]]
(3, 4)
----------------------------------------------------
6. 배열 세로 축으로 합치기(열)
import numpy as np
def test():
    ar1= np.arange(4).reshape(2,2)
    ar2= np.arange(8).reshape(2,4)
    ar3= np.concatenate([ar1,ar2],axis=1)
    print(ar3)
    print(ar3.shape)

[[0 1 0 1 2 3]
 [2 3 4 5 6 7]]
(2, 6)

-----------------------------------------------
7. 배열 나누기
import numpy as np
def test():
    ar= np.arange(8).reshape(2,4)
# split 배열 인덱스 2에서 열 기준으로 나누기
    lef,rig= np.split(ar,[2],axis=1)
    print('rig= ',rig)
    print(rig.shape)
    print('lef= ',lef)
    print(lef.shape)
    print('lef[1][1]= ',lef[1][1])

rig=  [[2 3]
 [6 7]]
(2, 2)
lef=  [[0 1]
 [4 5]]
(2, 2)
lef[1][1]=  5

import numpy as np
def test():
    ar= np.arange(8).reshape(2,4)
    lef,rig= np.split(ar,[1],axis=1)
    print('rig= ',rig)
    print(rig.shape)
    print('lef= ',lef)
    print(lef.shape)

rig=  [[1 2 3]
 [5 6 7]]
(2, 3)
lef=  [[0]
 [4]]
(2, 1)

# 행기준으로 배열 나누기
import numpy as np
def test():
    ar= np.arange(8).reshape(2,4)
    top,bot= np.split(ar,[1],axis=0)
    print('top= ',top)
    print(top.shape)
    print('bot= ',bot)
    print(bot.shape)

top=  [[0 1 2 3]]
(1, 4)
bot=  [[4 5 6 7]]
(1, 4)

--------------------------------------------------
Numpy의 연산과 함수
1. 상수 연산
import numpy as np
def test():
    ar1= np.random.randint(1,10,size=4).reshape(2,2)
    re_ar1=ar1*10
    re_ar2=ar1+2
    print(ar1)
    print(re_ar1)
    print(re_ar2)

[[5 4]
 [4 3]]

[[50 40]
 [40 30]]

[[7 6]
 [6 5]]
--------------------------------
https://github.com/ndb796/Python-Data-Analysis-and-Image-Processing-Tutorial/blob/master/04.%20Numpy%EC%9D%98%20%EC%97%B0%EC%82%B0%EA%B3%BC%20%ED%95%A8%EC%88%98/Python%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EB%B6%84%EC%84%9D%EA%B3%BC%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%B2%98%EB%A6%AC%20-%20Numpy%EC%9D%98%20%EC%97%B0%EC%82%B0%EA%B3%BC%20%ED%95%A8%EC%88%98.pdf