라이브러리 설치
- flask
- matplotlylib 그래프 라이브러리
- sklearn 알고리즘
분류 회귀
k 최근- 분류
k 최근- 회귀
------------------------------------------------------------
# flask 웹 모듈 라이브러리
# sklearn 알고리즘...라이브러리
# matplib 그래프 그려주는 라이브러리
# api

from flask import Flask
import matplotlib.pyplot as plt
#도미 데이터
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

plt.scatter(bream_length,bream_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
#plot는 선형 그래프 , scatter은 산점도
___________________________________________________________________________________________________________________

그래프 저장해서 웹화면이 뿌리기

from flask import Flask, render_template
import matplotlib.pyplot as plt

app = Flask(__name__)

@app.route("/")
def home():
    # 도미 데이터
    bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0,
                    33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5,
                    39.5, 41.0, 41.0]
    bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0,
                    600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0,
                    850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

    plt.scatter(bream_length, bream_weight)
    plt.xlabel('length')
    plt.ylabel('weight')
    brimg= f"static/brimg.png"
    plt.savefig(brimg)
    plt.close() #리소스 닫기
    return render_template("index.html",brimg=brimg)
app.run(host="localhost", port=5000)
-----------------------------------------------------------------------------------------------------------------
빙어 데이터 추가

from flask import Flask, render_template
import matplotlib.pyplot as plt

app = Flask(__name__)

@app.route("/")
def home():
    # 도미 데이터
    bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0,
                    33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5,
                    39.5, 41.0, 41.0]
    bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0,
                    600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0,
                    850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]
    # 빙어 데이터
    smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
    smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
    
    plt.scatter(bream_length, bream_weight, marker='o') # 도미데이터 그리기
    plt.scatter(smelt_length, smelt_weight, marker='*') # 빙어데이터 그리기
    
    plt.xlabel('length')
    plt.ylabel('weight')
    brimg= f"static/brimg.png"
    plt.savefig(brimg)
    plt.close() #리소스 닫기

    length = bream_length+ smelt_length  # x 배열 합치기
    weight = bream_weight + smelt_weight # y 배열 합치기

    #2차원 배열
    fish_data =[[l,w] for l,w in zip(length,weight)]
    print(fish_data)

    return render_template("index.html",brimg=brimg)
app.run(host="localhost", port=5000)

# 도미 데이터 : 1 양성 데이터
# 빙어 데이터: 0 음성 데이터
    fish_target =[1]*35 +[0]*14
    print(fish_target)

-------------------------------------------------------------------------
[[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0], [29.7, 450.0], [29.7, 500.0], [30.0, 390.0], [30.0, 450.0], [30.7, 500.0], [31.0, 475.0], [31.0, 500.0], [31.5, 500.0], [32.0, 340.0], [32.0, 600.0]
...
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
------------------------------------------------------------------------------
# flask 웹 모듈 라이브러리
# sklearn 알고리즘...라이브러리
# matplib 그래프 그려주는 라이브러리
# api

from flask import Flask, render_template
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

app = Flask(__name__)

@app.route("/")
def home():
    # 도미 데이터
    bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0,
                    33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5,
                    39.5, 41.0, 41.0]
    bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0,
                    600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0,
                    850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]
    # 빙어 데이터
    smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
    smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

    plt.scatter(bream_length, bream_weight, marker='o') # 도미데이터 그리기
    plt.scatter(smelt_length, smelt_weight, marker='*') # 빙어데이터 그리기

    plt.xlabel('length')
    plt.ylabel('weight')
    #plt.show()
    brimg= f"static/brimg.png"
    plt.savefig(brimg)
    plt.close() #리소스 닫기

    length = bream_length+ smelt_length  # x 배열 합치기
    weight = bream_weight + smelt_weight # y 배열 합치기

    #2차원 배열
    fish_data =[[l,w] for l,w in zip(length,weight)]
    print(fish_data)

    # 도미 데이터 : 1 양성 데이터
    # 빙어 데이터: 0 음성 데이터
    fish_target =[1]*35 +[0]*14
    print(fish_target)

    knc= KNeighborsClassifier()
    knc.fit(fish_data,fish_target) #데이터 만든 것 넣는 함수
    svalue=knc.score(fish_data,fish_target) # 이 데이터를 넣을떄 알고리즘 확률
    tvalue=knc.predict([[30,600]]) # 데이터를 넣을때 1, 0 인지 판단하는 함수

    print('svalue',svalue)
    print('tvalue', tvalue)

    return render_template("index.html",brimg=brimg)

# 도미 데이터와 빙어데이터가 나열
app.run(host="localhost", port=5000)
-----------------------------------------
svalue 1.0
tvalue [1]
________________________________________________________________________________
# flask 웹 모듈 라이브러리
# sklearn 알고리즘...라이브러리
# matplib 그래프 그려주는 라이브러리
# api

from flask import Flask, render_template
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

app = Flask(__name__)

@app.route("/")
def home():
    # 도미 데이터
    bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0,
                    33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5,
                    39.5, 41.0, 41.0]
    bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0,
                    600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0,
                    850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]
    # 빙어 데이터
    smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
    smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

    plt.scatter(bream_length, bream_weight, marker='o') # 도미데이터 그리기
    plt.scatter(smelt_length, smelt_weight, marker='*') # 빙어데이터 그리기

    plt.scatter(30,600, marker='^') # x,y (30,600) 좌표에 세모 마커 추가

    plt.xlabel('length')
    plt.ylabel('weight')
    #plt.show()
    brimg= f"static/brimg.png"
    plt.savefig(brimg)
    plt.close() #리소스 닫기

    length = bream_length+ smelt_length  # x 배열 합치기
    weight = bream_weight + smelt_weight # y 배열 합치기

    #2차원 배열
    fish_data =[[l,w] for l,w in zip(length,weight)]
    print(fish_data)

    # 도미 데이터 : 1 양성 데이터
    # 빙어 데이터: 0 음성 데이터
    fish_target =[1]*35 +[0]*14
    print(fish_target)

    knc= KNeighborsClassifier()
    knc.fit(fish_data,fish_target) #데이터 만든 것 넣는 함수
    svalue=knc.score(fish_data,fish_target) # 이 데이터를 넣을떄 알고리즘 확률
    tvalue=knc.predict([[30,600]]) # 데이터를 넣을때 1, 0 인지 판단하는 함수

    print('svalue',svalue)
    print('tvalue', tvalue)
    #좌표 30,600의 데이터가 도미인지 빙어인지 확인
    prevalue="도미"
    if tvalue == 1:
        prevalue="도미"
    else:
        prevalue="빙어"

    return render_template("index.html",brimg=brimg,prevalue=prevalue)

# 도미 데이터와 빙어데이터가 나열
app.run(host="localhost", port=5000)
-----------------------------------------------
#from sklearn.neighbors import KNeighborsClassifier
 KNeighborsClassifier

K-최근접 이웃(K-Nearest Neighbor)은 머신러닝에서 사용되는 분류(Classification) 알고리즘이다. 
유사한 특성을 가진 데이터는 유사한 범주에 속하는 경향이 있다는 가정하에 사용한다.

모든 데이터(점)에는 각각 x값과 y값이 있다. 
현재 도미데이터를 1, 빙어데이터를 0으로 분류하였다.
그리고 아직 분류가 되지 않은 새로운 데이터를 1과 0 인지 K-최근접 이웃(K-Nearest Neighbor) 알고리즘으로 분류하는 것

knc.fit(fish_data,fish_target) #데이터 만든 것 넣는 함수
	.fit()  x 데이터(fish_data)는 여러 개의 차원으로 이루어진 배열(점들의 집합)이 될 거고, 
	y 데이터(fish_target)는 레이블(각 점들의 분류 결과)가 된다. 현재 0 아니면 1로 분류

새로운 값들을 분류하고 싶다면 .predict()를 사용하면 된다
tvalue=knc.predict([[30,600]])
print('tvalue', tvalue)  >>>tvalue [1] # 30,600 은 도미 데이터로 분류된다.
 
 #좌표 30,600의 데이터가 도미인지 빙어인지 확인
    prevalue="도미"
    if tvalue == 1:
        prevalue="도미"
    else:
        prevalue="빙어"

모델이 얼마나 잘 일반화되었는지 평가하기 위해 score 메서드에 테스트 데이터와 테스트 레이블을 넣어 호출
svalue=knc.score(fish_data,fish_target)
print('svalue',svalue)

svalue 1.0

_______________________________________________________________________________________________________________
# flask 웹 모듈 라이브러리
# sklearn 알고리즘...라이브러리
# matplib 그래프 그려주는 라이브러리
# api

from flask import Flask, render_template, request
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

app = Flask(__name__)

@app.route("/")
def home():
    wlength = request.args.get("length",default=30, type= float) # 입력값 없을떄 기본 값 30 , 자료형 타입 설정
    wweight = request.args.get("weight", default=600, type=float)# 입력값 없을떄 기본 값 600, 타입 설정 안할시 문자열로 받음
    # 도미 데이터
    bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0,
                    33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5,
                    39.5, 41.0, 41.0]
    bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0,
                    600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0,
                    850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]
    # 빙어 데이터
    smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
    smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

    plt.scatter(bream_length, bream_weight, marker='o') # 도미데이터 그리기
    plt.scatter(smelt_length, smelt_weight, marker='*') # 빙어데이터 그리기

    plt.scatter(wlength,wweight, marker='^') # x,y (30,600) 좌표에 세모 마커 추가

    plt.xlabel('length')
    plt.ylabel('weight')
    #plt.show()
    brimg= f"static/brimg.png"
    plt.savefig(brimg)
    plt.close() #리소스 닫기

    length = bream_length+ smelt_length  # x 배열 합치기
    weight = bream_weight + smelt_weight # y 배열 합치기

    #2차원 배열
    fish_data =[[l,w] for l,w in zip(length,weight)]
    print(fish_data)

    # 도미 데이터 : 1 양성 데이터
    # 빙어 데이터: 0 음성 데이터
    fish_target =[1]*35 +[0]*14
    print(fish_target)

#k-최근접 이웃 알고리즘
    knc= KNeighborsClassifier()
    knc.fit(fish_data,fish_target) #데이터 만든 것 넣는 함수
    svalue=knc.score(fish_data,fish_target) # 이 데이터를 넣을떄 알고리즘 확률
    tvalue=knc.predict([[wlength,wweight]]) # 데이터를 넣을때 1, 0 인지 판단하는 함수

    print('svalue',svalue)
    print('tvalue', tvalue)
    #좌표 30,600의 데이터가 도미인지 빙어인지 확인
    prevalue="도미"
    if tvalue == 1:
        prevalue="도미"
    else:
        prevalue="빙어"

    return render_template("index.html",brimg=brimg,prevalue=prevalue)

# 도미 데이터와 빙어데이터가 나열
app.run(host="localhost", port=5000)
---------------------------------------------------------------------------------------------------
#k-최근접 이웃 알고리즘
    knc= KNeighborsClassifier(n_neighbors=20)
    knc.fit(fish_data,fish_target) #데이터 만든 것 넣는 함수
    svalue=knc.score(fish_data,fish_target) # 이 데이터를 넣을떄 알고리즘 확률
    tvalue=knc.predict([[wlength,wweight]]) # 데이터를 넣을때 1, 0 인지 판단하는 함수

    print('svalue',svalue)
    print('tvalue', tvalue)
    #좌표 30,600의 데이터가 도미인지 빙어인지 확인
    prevalue="도미"
    if tvalue == 1:
        prevalue="도미"
    else:
        prevalue="빙어"

svalue 0.9795918367346939
tvalue [0]


knc= KNeighborsClassifier(n_neighbors=20) 가장 가까운 이웃의 숫자 지정가능
현재는 20개으로 설정 
