https://github.com/ndb796/Python-Data-Analysis-and-Image-Processing-Tutorial
0524 학습하기
1. 파이썬
2.jsp
3.
#cmd창에서 git clone 하기

D:\MysecondRepository_20210402\python>git clone https://github.com/ndb796/Python-Data-Analysis-and-Image-Processing-Tutorial
Cloning into 'Python-Data-Analysis-and-Image-Processing-Tutorial'...
remote: Enumerating objects: 328, done.
remote: Counting objects: 100% (81/81), done.
remote: Compressing objects: 100% (77/77), done.
Receiving objects:  26% (88/328), 1.59 MiB | 19.00 KiB/s

import numpuy as np

#Terminal 창에서 pip install numpy 라이브러리 설치
numpy: 
1차원 벡터
2차원 Martrix


import numpy as np
from ex01 import doA

def print_hi(name):
    print(f'Hi, {name}')
    mylist=[1,2,3]
    mylist_np= np.array(mylist)
    mylist_np2=numpuy.array(mylist)
    print(mylist_np.size)
    print(mylist_np.dtype)
    print(mylist_np[2])

if __name__ == '__main__':
    print_hi('PyCharm')
    doA()

import numpy as np

def doA():
    np1= np.arrange(4) #0~3까지 numpy배열 선언
    np2= np.zeros((4,4),dtype=float)# 0으로 초기화 2차원 배열 4햏4열 flost형 선언
    np3= np.ones((3,3), dtype=str) # 1로 초기화 3행 3열 문자열형 선언

    np4= np.random.randint(0,10,(2,2))# 0~9까지 2행2열
    np5= np.random.normal(0,1,(3,3)) #0~1가지 표준정규를 띄는 배열
    print(np1)
    print(np2)
    print(np3)
    print(np4)
    print(np5)

def doB():
    np1 =np.array([1,2])
    np2 = np.array([3,4])
    np3 = np1+np2
    np4 = np.concatenate(np1,np2)
    print(np3)
    print(np4)
_______________________________________________________________________
def ex02_doA():
    np1= np.arange(8)
    np2 = np1*3
    print('np1= ',np1)
    print(np2)

np1=  [0 1 2 3 4 5 6 7]
[ 0  3  6  9 12 15 18 21]
-------------------------------------------------------------
def ex02_doB():
    np1= np.arange(0,8).reshape(2,4)
    np2 = np.arange(0,8).reshape(2,4)
    np3 = np.concatenate([np1, np2],axis=0)
    np4= np.arange(0,4).reshape(4,1)
    print(np1)
    print(np2)
    print(np3)
    print(np4)

[[0 1 2 3]
 [4 5 6 7]]

[[0 1 2 3]
 [4 5 6 7]]

[[0 1 2 3]
 [4 5 6 7]
 [0 1 2 3]
 [4 5 6 7]]

[[0]
 [1]
 [2]
 [3]]
----------------------------------------------------------
def ex02_doC():
    np1= np.arange(16).reshape(4,4)
    print(np1)
    np2= np1 <10
    print(np2)
    np3= np.arange(16).reshape(4,4)
    np3[np2]=100
    print(np3)

[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]
[[ True  True  True  True]
 [ True  True  True  True]
 [ True  True False False]
 [False False False False]]
[[100 100 100 100]
 [100 100 100 100]
 [100 100  10  11]
 [ 12  13  14  15]]


