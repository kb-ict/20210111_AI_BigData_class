function callthreetimes(callback)// 함수를 정의(선언)
{
    for(let i=0; i<3; i++)
    callback(i)
}
function print(i) // 함수를 정의(선언)
{
    console.log(i+" 번째")
}
// 두개 결과 같다
callthreetimes(print)

callthreetimes( //함수를 호출한 것
    function(i){
        console.log(i+"번째")
    }
)

0 번째
1 번째
2 번째
0번째
1번째
2번째

//배열에 대해서 제공되는 함수 3가지
//forEach, map, filter
//모두 콜백함수를 이용
let numbers= [273,52,103,32,57]

//forEach: 배열의 각각의 요소에 접근하게 해주는 메소드(함수)
//배열 내부의 요소를 사용해서 콜백함수를 호출


numbers.forEach(function(value, index, array){//보통 'array는 생략
    console.log(`${index}번째 요소 : ${value}`)
})


// numbers=numbers.map(function(value,index,array){
//     return value*2 // 새로운 배열을 생성하여 numbers에 대입
// })
// const power = function(value,index,array)
// {
//     return value*value
// }
function power(value,index,array)
{
    return value*value
}

numbers=numbers.map(power)
console.log(numbers)
numbers.forEach(console.log)


0번째 요소 : 273
1번째 요소 : 52
2번째 요소 : 103
3번째 요소 : 32
4번째 요소 : 57
[ 74529, 2704, 10609, 1024, 3249 ]
273 0 [ 273, 52, 103, 32, 57 ]
52 1 [ 273, 52, 103, 32, 57 ]
103 2 [ 273, 52, 103, 32, 57 ]
32 3 [ 273, 52, 103, 32, 57 ]
57 4 [ 273, 52, 103, 32, 57 ]


//filter
//map이랑 마찬가지로, 특정 조건을 만족하는 녀셕만 추려내서 새로운 배열을 생성
const number2=[0,1,2,3,4,5]
const eventNumbers= number2.filter(function(value)
{
    return value%2===0
})
console.log("원본: "+ number2)
console.log("새로운 배열: "+eventNumbers)

//화살표 함수(람다식 함수)
const arrowFunc=(value) => value%2===0
const eventNumbers2=number2.filter(arrowFunc)
console.log("원본: "+ number2)
console.log("새로운 배열: "+eventNumbers2)

원본: 0,1,2,3,4,5
새로운 배열: 0,2,4
원본: 0,1,2,3,4,5
새로운 배열: 0,2,4

//연속적으로 사용가능
let numberEx=[0,1,2,3,4,5,6,7,8,9]
numbers.filter((value)=> value % 2===0).forEach((value)=>{console.log(value)})


___________________________________________________________________________________________________
setTimeout(()=>{
    console.log('1초뒤 실행함!')
}, 1*1000) //1000ms(=1초)뒤 실행

let count=0
setInterval(()=>{
    console.log('1초마다 실행함'+count)
    count++
},1*1000)

setTimeout(()=>{
    console.log('5초뒤 꺼짐')
    clearInterval(id)
},5*1000) //1000ms(=5초)뒤 실행

1초뒤 실행함!
1초마다 실행함0
1초마다 실행함1
1초마다 실행함2
1초마다 실행함3
5초뒤 꺼짐